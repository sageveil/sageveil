name: Publish Port
on:
  release:
    types:
      - published
      - prereleased
jobs:
  publish:
    if: ${{ startsWith(github.event.release.tag_name, 'port/') }}
    runs-on: ubuntu-latest
    env:
      ORG: ${{ vars.PUBLISH_ORG != '' && vars.PUBLISH_ORG || 'sageveil' }}
    steps:
      - name: Parse tag to port and version
        id: parse
        shell: bash
        run: |
          TAG="${{ github.event.release.tag_name }}"
          # Matches port/@scope/port@1.2.3 or port/@scope/port@1.2.3-rc.1
          if [[ "$TAG" =~ ^port/@[^/]+/([^@]+)@([0-9]+\.[0-9]+\.[0-9]+([-\.][A-Za-z0-9\.]+)?)$ ]]; then
            PORT="${BASH_REMATCH[1]}"
            VERSION="${BASH_REMATCH[2]}"
            echo "port=$PORT" >> "$GITHUB_OUTPUT"
            echo "version=$VERSION" >> "$GITHUB_OUTPUT"
            echo "Tag OK. port=$PORT version=$VERSION"
          else
            echo "Invalid tag format: $TAG"
            echo "Expected port/@scope/port-name@version. Example port/@sageveil/tmux@1.0.0"
            exit 1
          fi
      - name: Checkout monorepo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}
          ref: ${{ github.event.release.tag_name }}
      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: 10.18.3
          run_install: false
      - uses: actions/setup-node@v6
        with:
          node-version: 24.10
          cache: pnpm
      - run: pnpm install --frozen-lockfile
      - name: Build selected port
        shell: bash
        run: |
          PORT="${{ steps.parse.outputs.port }}"
          if [[ ! -d "packages/ports/$PORT" ]]; then
            echo "Port source not found at packages/ports/$PORT"
            exit 1
          fi
          pnpm nx run "$PORT:generate"
      - name: Verify artifacts
        shell: bash
        run: |
          PORT="${{ steps.parse.outputs.port }}"
          test -d "dist/ports/$PORT" || { echo "dist/$PORT missing. Build must place artefacts there."; exit 1; }
      - name: Publish artifacts to downstream repo
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        run: |
          set -euo pipefail
          PORT="${{ steps.parse.outputs.port }}"
          VERSION="${{ steps.parse.outputs.version }}"
          ORG="${ORG:-sageveil}"
          TARGET_REPO="$ORG/$PORT"
          TARGET_URL="https://x-access-token:${GITHUB_TOKEN}@github.com/${TARGET_REPO}.git"

          PUB_DIR="$(mktemp -d)"
          trap 'rm -rf "$PUB_DIR"' EXIT
          echo "Using publish directory: ${PUB_DIR}"

          if ! git clone --depth=1 "$TARGET_URL" "$PUB_DIR"; then
            # Fallback: repo missing or empty, bootstrap it
            mkdir -p "$PUB_DIR"
            git -C "$PUB_DIR" init -b main
            git -C "$PUB_DIR" remote add origin "$TARGET_URL"
          fi

          rsync -a --delete --exclude '.git/' "dist/ports/$PORT/" "$PUB_DIR/"

          git -C "$PUB_DIR" config user.name "sageveil-bot"
          git -C "$PUB_DIR" config user.email "bot@sageveil"

          # Stage and detect changes
          git -C "$PUB_DIR" add -A
          if git -C "$PUB_DIR" diff --cached --quiet; then
            echo "No changes to publish for ${PORT} ${VERSION}"
            # Create tag if it does not exist yet
            if ! git -C "$PUB_DIR" rev-parse -q --verify "refs/tags/${VERSION}" >/dev/null; then
              git -C "$PUB_DIR" tag "${VERSION}"
              git -C "$PUB_DIR" push origin "refs/tags/${VERSION}"
            fi
            exit 0
          fi

          git -C "$PUB_DIR" commit -m "chore(release): ${VERSION}"
          git -C "$PUB_DIR" branch -M main
          git -C "$PUB_DIR" push origin main
          git -C "$PUB_DIR" tag -f "${VERSION}"
          git -C "$PUB_DIR" push origin "refs/tags/${VERSION}"
      - name: Prepare release notes from monorepo
        id: notes
        env:
          MONO_TAG: ${{ github.event.release.tag_name }}
          GITHUB_TOKEN: ${{ secrets.PAT }}
        shell: bash
        run: |
          NOTES_FILE="$(pwd)/.release-notes.md"
          # Try to read monorepo release body for the triggering tag
          if gh api \
               repos/${GITHUB_REPOSITORY}/releases/tags/${MONO_TAG} \
               --jq .body > "$NOTES_FILE"; then
            echo "Got monorepo notes for ${MONO_TAG}"
          else
            echo "Could not find monorepo release ${MONO_TAG}, generating simple notes"
            echo "Release ${MONO_TAG}" > "$NOTES_FILE"
          fi
          echo "notes_file=$NOTES_FILE" >> "$GITHUB_OUTPUT"
      - name: Create downstream GitHub release
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        run: |
          set -euo pipefail
          PORT="${{ steps.parse.outputs.port }}"
          VERSION="${{ steps.parse.outputs.version }}"
          ORG="${{ env.ORG }}"
          DEST_REPO="${ORG}/${PORT}"
          NOTES_FILE="${{ steps.notes.outputs.notes_file }}"

          # Title and prerelease flag
          TITLE="${PORT} ${VERSION}"
          PRE=""
          if [[ "$VERSION" == *-* ]]; then
            PRE="--prerelease"
          fi

          # Create or update release on the downstream repo
          # If the release already exists, this will exit non-zero, so we try edit
          if ! gh release create "${VERSION}" \
                --repo "${DEST_REPO}" \
                --title "${TITLE}" \
                --notes-file "${NOTES_FILE}" \
                ${PRE}; then
            echo "Release exists, updating notes and title"
            gh release edit "${VERSION}" \
              --repo "${DEST_REPO}" \
              --title "${TITLE}" \
              --notes-file "${NOTES_FILE}" \
              ${PRE}
          fi
      - name: Summary
        run: |
          echo "Published ${{ steps.parse.outputs.port }} ${{ steps.parse.outputs.version }} to https://github.com/${{ env.ORG }}/${{ steps.parse.outputs.port }}"
